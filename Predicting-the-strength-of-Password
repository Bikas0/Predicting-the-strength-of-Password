import pandas as pd
import numpy as np
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')


######REading dataset


df = pd.read_csv("/content/drive/MyDrive/data.csv", error_bad_lines=False)
df.head()
df["strength"].unique()


#######code to check all the missing values in my dataset


df.isnull().sum()
df.isna().sum()
df[df["password"].isna()]
df.dropna(inplace=True)
sns.countplot(df["strength"])
password_tuple = np.array(df)
password_tuple


#####shuffling randomly for robustness


import random
random.shuffle(password_tuple)
x = [label[0] for label in password_tuple]
y = [label[1] for label in password_tuple]

######create a custom function to split input into characters of list

def word_divide_char(inputs):
  characters = []
  for i in inputs:
    characters.append(i)

  return characters  
word_divide_char('kzde5577')

#######import TF-IDF vectorizer to convert String data into numerical data

from sklearn.feature_extraction.text import TfidfVectorizer
vectorizer = TfidfVectorizer(tokenizer = word_divide_char)
#######apply TF-IDF vectorizer on data
X = vectorizer.fit_transform(x)
vectorizer.get_feature_names()
first_docement_vector = X[0]
first_docement_vector
first_docement_vector.T.todense()
data=pd.DataFrame(first_docement_vector.T.todense(),index=vectorizer.get_feature_names(),columns=['TF-IDF'])
data.sort_values(by=['TF-IDF'],ascending=False)

#######split data into train & test
"""
train---> To learn the relationship within data, 
test-->  To do predictions, and this testing data will be unseen to my model
"""

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, t_test = train_test_split(X,y,test_size=0.2, random_state = 42)
x_train.todense()

###### Apply Logistic on data as use-cas is Classification


from sklearn.linear_model import LogisticRegression
clf = LogisticRegression(multi_class="multinomial")
clf.fit(x_train, y_train)

##### doing prediction on X-Test data

y_pred = clf.predict(x_test)
y_pred

######### check Accuracy of your model using confusion_matrix,accuracy_score


from sklearn.metrics import confusion_matrix, accuracy_score, classification_report
print(confusion_matrix(t_test, y_pred))
print(accuracy_score(t_test, y_pred))

######## create report of your model

print(classification_report(t_test, y_pred))



##This part is the most important for me
dt = input()
dt = np.array([dt])
pred = vectorizer.transform(dt)
output = clf.predict(pred)
output
if (output==2):
  print("Strong Password")
elif (output==1):
    print("Medium Password")
else:
  print("Normal Password")    
  
